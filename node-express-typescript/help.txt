https://ultimatecourses.com/blog/setup-typescript-nodejs-express
-----------------------------------------------------
npm init
or
npm init -y

the y flag to skip the prompts for additional information
------------------------------------------
npm install --global typescript
or
npm install --save-dev typescript

tsc --init
create a file called tsconfig.json

{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "dist"
  },
  "lib": ["es2015"]
}

./node_modules/.bin/tslint --init
bring tslint.json file

{
  "defaultSeverity": "error",
  "extends": ["tslint:recommended"],
  "jsRules": {},
  "rules": {
    "no-console": false
  },
  "rulesDirectory": []
}


npx tsc --init
This is where npx comes into play to execute the local version of our typescript


npm i body-parser cross-env dotenv express helmet rimraf
or
npm i @types/body-parser @types/express @types/node

body-parser extracts the entire body of an incoming request stream (for Express) and exposes it on req.body as something easier to work with, typically using JSON.
cross-env sets environment variables without us having to worry about the platform.
dot-env loads in .env variables into process.env so we can access them inside our *.ts files.
express is a framework for building APIs, such as handling GET, POST, PUT, DELETE requests with ease and building your application around it. It’s simple and extremely commonly used.
helmet adds some sensible default security Headers to your app.
rimraf is essentially a cross-platform rm -rf for Node.js so we can delete older copies of our dist directory before recompiling a new dist


npm i --save-dev concurrently nodemon

add this scripts to package.json
"scripts": {
  "build": "rimraf dist && tsc",
  "preserve": "npm run build",
  "serve": "cross-env NODE_ENV=development concurrently \"tsc --watch\" \"nodemon -q dist/index.js\"",
  "prestart": "npm run build",
  "start": "cross-env NODE_ENV=production node dist/index.js",
  "test": "echo \"Error: no test specified\" && exit 1"
},


"build" is used in a few places so let’s start here. When we npm run build our rimraf package will delete our existing dist folder, ensuring no previous files exist. Then, we run tsc to build our project, which as we know is compiled into dist (remember we specified this in our tsconfig.json). i.e. deletes the old code and replaces it with the new code.

"preserve" just calls our "build" command to clean up any existing dist folders and recompiles via tsc. This gets called before the "serve" command, when we run npm run serve (which we’ll use to develop on localhost).

"serve" uses our cross-env package to set the NODE_ENV to development, so we know we’re in dev mode. We can then access process.env.NODE_ENV anywhere inside our .ts files should we need to. Then, using concurrently we’re running tsc --watch (TypeScript Compiler in “watch mode”) which will rebuild whenever we change a file. When that happens, our TypeScript code is outputted in out dist directory (remember we specified this in our tsconfig.json). Once that’s recompiled, nodemon will see the changes and reload dist/index.js, our entry-point to the app. This gives us full live recompilation upon every change to a .ts file.

"prestart" runs the same task as "preserve" and will clean up our dist, then use tsc to compile a new dist. This happens before the "start" is kicked off, which we run via npm start.

"start" uses cross-env again and sets the NODE_ENV to production, so we can detect/enable any “production mode” features in our code. It then uses node dist/index.js to run our project, which is already compiled in the "prestart" hook. All our "start" command does is execute the already-compiled TypeScript code.

"test" pffft. What tests.

------------------------------------------
Express.js چیست و چرا انقدر مهمه ؟‌
خب express.js همانطور که در سایت خودش نوشته یک فریمورک سریع ، بی درد سر و سبک وزن یا مینیمال برای نود جی اس است .

Fast, unopinionated, minimalist web framework for Node.js

به زبان جاوا اسکریپت نوشته شده است و تنها بعنوان یک لایه ی نازک ویژگی های هسته ی وب عمل میکند . بر خلاف فریمورک های بزرگ و پردردسر مثل Ruby on Rails  اکسپرس هیچگونه تمپیلت انجین یا ORM جانبی ندارد . اکسپرس توسط کامپوننت های دیگر ساخته نشده است . 

------------------------------------------
npm install -D tslint
The -D flag is the shortcut for: --save-dev
The -S flag option is the Save option in npm

npm install -S express
npm install -D @types/express

The second command installs the Express types for TypeScript support. Types in TypeScript are files, normally with an extension of .d.ts. The files are used to provide type information about an API, in this case the Express framework.

This package is required because TypeScript and Express are independent packages. Without the @types/express package, there is no way for TypeScript to know about the types of Express classes.

-------------------------------------------------------

yarn is package manager like npm but its safer and faster and its develope by facebook
yarn still using by npm
most people syas using yarn instead of npm
-------------------------------------------------------
yarn.lock is file that lock the dependancy of module that breaks your app
-------------------------------------------------------
nvm node version management
Volta handles node versions and can set a default version to load also

volta install yarn
volta pin yarn
-------------------------------------------------------
tsc --version
show version of type script
-------------------------------------------------------
کارایی اصلی nodemon، ری‌استارت کردن برنامه بصورت اتوماتیک باشد که بر اثر هر تغییری در کدهای برنامه صورت میگیرد
-------------------------------------------------------